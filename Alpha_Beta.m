% =========================================================================
% Project      : Green Electricity
% Script Name  : Alpha_Beta_C.m
% Author       : Mohammad Izadi
% Created On   : 01-Jun-2024
% Last Updated : 31-Jul-2025
% Version      : v0.1.1
% Modified By  : Ali Izadi
%
% Description  :
%   This script performs sensitivity analysis of:
%     - Alpha (α): PV-to-demand ratio
%     - Beta (β) : Battery-to-demand ratio
%
%   The energy generation calculations for PV and wind have been updated to
%   use country-specific **capacity factor profiles**, replacing the previous
%   method based on irradiation and wind speed data.
%
% Dependencies :
%   - inputs.m                  : Defines system inputs and parameters
%   - PV_Wind_CapacityFactor.m  : Provides hourly capacity factor data (8760 points/year)
%
% Usage Notes  :
%   - Modify 'inputs.m' to change simulation settings or country selection.
%   - Ensure correct capacity factor files are loaded based on region.
%
% Change Log   :
%   v0.1.1 - 31-Jul-2025 - Switched to country-specific capacity factor method
%                        - Replaced previous irradiation and wind speed logic
%                        - Header and dependency structure updated
% =========================================================================
Power_dem = gamma.*PowerDemand;
n_b=ceil(Demand_day*beta/24/s_b);%realizing the number of required ESS modules

%% PV Input Parameters and Calculations (using capacity factor)
PV_Unit_Installed = 0.500;  % Nameplate capacity of one solar PV panel [kW]
PV_Unit_Area      = 2.35;   % Average area of one 500W solar PV panel [m^2]

% Unit Solar PV annual generation calculation
Power_pv = PV_Unit_Installed * pv_cf_selected;  % [kW] Hourly PV power output from one panel over a year (vector of 8760 hours)
E_pv     = sum(Power_pv);                       % [kWh/year] Annual energy output from one panel (using hourly profile)

% Total required annual PV generation
E_pv_tot = alpha * Demand;  % Annual PV energy generation needed [kWh]

% PV installed capacity required
PV_Installed = E_pv_tot / (8760 * cf_pv_annual_ave);  % Required PV capacity factor based on selected country[kW]

% Number of PV panels required
n_pv = ceil(PV_Installed / PV_Unit_Installed);  % Number of PV solar Pannel units [units]

% Total PV area required
PV_tot_installation_area = n_pv * PV_Unit_Area / 1e6;  % Total area in km^2


%% Wind Input Parameters and Calculations (using capacity factor)
Wind_Unit_Installed = 2800;   % [kW] GE Vernova 2.8-127
Wind_Area_per_MW    = 1.5e5;  % [m²/MW] Total effective land use per MW of onshore wind

% Unit Wind Turbine generation calculation
Power_wind = Wind_Unit_Installed * wind_cf_selected;  % [kW] Hourly Wind Turbine output over a year (vector of 8760 hours)
E_wt     = sum(Power_wind);                           % [kWh/year] Annual energy generated by one Wind Turbine

% Total required annual Wind generation
E_wt_tot = (1-alpha)*Demand; % Annual Wind energy generation needed [kWh]

% Number of required Wind Turbine in Wind farm
n_wt = ceil(E_wt_tot / E_wt);  % Number of wind turbine units [units], rounded up

% Wind installed capacity required
Wind_Installed = n_wt * Wind_Unit_Installed;  % Required Wind capacity factor based on selected country[kW]

% Total Wind farm required area
Wind_tot_installation_area = n_wt * (Wind_Unit_Installed / 1000) * Wind_Area_per_MW / 1e6;  % [km²]

% sum of renewable energy
Power_ren_tot=n_wt*Power_wind+n_pv*Power_pv; %total power generated by renewable energy sources during a year[kW]
E_ren_tot=Deltat*sum(Power_ren_tot);%total Energy generated by renewable energy sources in a year[kWh]

% changing the time resolution of the renewable energy and demand to 15min
dt=1; %time resolution [h]
P_ren=repelem(Power_ren_tot,Deltat/dt); % power generated by PV+WT with the resolution of 15 min
P_dem=repelem(Power_dem,Deltat/dt); % demand power with the resolution of 15 min
E_b=[E_b_o*n_b*s_b];
P_b=[];
P_g=[];
P_s=[];
for i=1:size(P_ren)
    if P_dem(i)-P_ren(i) > 0 &&  P_dem(i)-P_ren(i) <= P_b_max_dis*n_b && E_b(end)>E_min*n_b*s_b
                                                                        % Battery should be discharged
        P_b=[P_b;P_dem(i)-P_ren(i)];
        P_g=[P_g;0];
        P_s=[P_s;P_dem(i)];
        E=E_b(end)-dt*P_b(i);
        E_b=[E_b;E];

    else                                                                % battery should be charged or back to grid

      if P_ren(i)>=P_dem(i)                                       % Supply more than demand
          if E_b(end)<E_max*n_b*s_b                         % Not reached to max SOC
                  if P_ren(i)-P_dem(i)<=P_b_max_ch*n_b  % battery NOT limited to be charged by it's max power
                      P_b=[P_b;P_dem(i)-P_ren(i)];
                      P_g=[P_g;0];
                      P_s=[P_s;P_dem(i)];
                      E=E_b(end)-dt*P_b(i);
                      E_b=[E_b;E];
                  else                                  % battery is limited to be charged by it's max power
                       P_b=[P_b;-1*P_b_max_ch];
                       P_g=[P_g;P_dem(i)-P_ren(i)-P_b(i)];
                       P_s=[P_s;P_dem(i)];
                       E=E_b(end)-dt*P_b(i);
                       E_b=[E_b;E];
                  end
          else                                              % battery reached to max SOC or No battery
              P_b=[P_b;0];
              P_g=[P_g;P_dem(i)-P_ren(i)];
              P_s=[P_s;P_dem(i)];
              E=E_b(end);
              E_b=[E_b;E];
          end
      else                                                        % Supply less than demand
          if E_b(end)<E_max*n_b*s_b                         % Not reached to max SOC
                  if P_ren(i)<=P_b_max_ch*n_b  % battery NOT limited to be charged by it's max power
                      P_b=[P_b;-P_ren(i)];
                      P_g=[P_g;0];
                      P_s=[P_s;0];
                      E=E_b(end)-dt*P_b(i);
                      E_b=[E_b;E];
                  else                                  % battery is limited to be charged by it's max power
                       P_b=[P_b;-1*P_b_max_ch];
                       P_g=[P_g;P_b(i)-P_ren(i)];
                       P_s=[P_s;0];
                       E=E_b(end)-dt*P_b(i);
                       E_b=[E_b;E];
                  end
          else                                              % battery reached to max SOC or No battery
              P_b=[P_b;0];
              P_g=[P_g;-P_ren(i)];
              P_s=[P_s;0];
              E=E_b(end);
              E_b=[E_b;E];
          end
      end
    end
end
P_g_dt=P_g*dt;
%    grid_with=sum(P_g_dt(P_g_dt > 0)); %sum of all positive grid power(Energy withdrawn from grid over a year [kWh])
%    gridwithdrawal=[gridwithdrawal,grid_with];

for m = 1:1:12
  grid_month = P_g_dt(months == m);
  NoSupply_month = P_s(months == m);
  NoSupply_hour(m) = nnz(NoSupply_month == 0);
  grid_with_hour(m) = nnz(grid_month > 0);
  grid_with_E(m) = sum(grid_month(grid_month > 0))*100;
  grid_inj_E(m) = sum(grid_month(grid_month < 0))*100;
end
PR  =  [PR;[alpha, beta,gamma,(months_hours - NoSupply_hour)./sum(months_hours - NoSupply_hour)]];
MHE =  [MHE;[alpha, beta,gamma,(months_hours - NoSupply_hour)]];
GwE = [GwE;[alpha, beta,gamma,grid_with_E]];
GiE = [GiE;[alpha, beta,gamma,grid_inj_E]];
NSH = [NSH;[alpha, beta,gamma,NoSupply_hour]];
