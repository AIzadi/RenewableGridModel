Power_dem = gamma.*PowerDemand;
n_b=ceil(Demand_day*beta/24/s_b);%realizing the number of required ESS modules
%PV
Power_pv=eta_pv*A_pv*irradiationdata/1000; %output power of one PV [kW]
E_pv=sum(Power_pv)*Deltat; %Energy obtained by one solar panel in a year[kWh]

%realizing the number of required solar panels
n_pv=0;
E_pv_tot=E_pv;
while E_pv_tot<alpha*Demand
 n_pv=n_pv+1;
 E_pv_tot=n_pv*E_pv;
end


% Wind Turbine
c_w= p_w_rated/(0.5*rho*A_sw*v_rated^3);
Power_wind=[];%output power of one wind turbine
for i=1:size(winddata,1)
    if winddata(i)>v_cutout || winddata(i)<v_cutin
      Power_wind(i)=0;
    elseif winddata(i)>v_rated
      Power_wind(i)=p_w_rated/1000;
    else
      Power_wind(i)=0.5*c_w*rho*A_sw*winddata(i).^3/1000;  %output power of one wind turbine
    end
end
Power_wind=Power_wind';  %output power of wind turbine
E_wt=sum(Power_wind)*Deltat; %Energy obtained by one wind turbine in a year[kWh]

%realizing the number of required wind turbines
n_wt=0;
E_wt_tot=E_wt;
while E_wt_tot<(1-alpha)*Demand
 n_wt=n_wt+1;
 E_wt_tot=n_wt*E_wt;
end

% sum of renewable energy
Power_ren_tot=n_wt*Power_wind+n_pv*Power_pv; %total power generated by renewable energy sources during a year[kW]
E_ren_tot=Deltat*sum(Power_ren_tot);%total Energy generated by renewable energy sources in a year[kWh]

% changing the time resolution of the renewable energy and demand to 15min
dt=1; %time resolution [h]
P_ren=repelem(Power_ren_tot,Deltat/dt); % power generated by PV+WT with the resolution of 15 min
P_dem=repelem(Power_dem,Deltat/dt); % demand power with the resolution of 15 min
E_b=[E_b_o*n_b*s_b];
P_b=[];
P_g=[];
P_s=[];
for i=1:size(P_ren)
    if P_dem(i)-P_ren(i) > 0 &&  P_dem(i)-P_ren(i) <= P_b_max_dis*n_b && E_b(end)>E_min*n_b*s_b
                                                                        % Battery should be discharged
        P_b=[P_b;P_dem(i)-P_ren(i)];
        P_g=[P_g;0];
        P_s=[P_s;P_dem(i)];
        E=E_b(end)-dt*P_b(i);
        E_b=[E_b;E];

    else                                                                % battery should be charged or back to grid

      if P_ren(i)>=P_dem(i)                                       % Supply more than demand
          if E_b(end)<E_max*n_b*s_b                         % Not reached to max SOC
                  if P_ren(i)-P_dem(i)<=P_b_max_ch*n_b  % battery NOT limited to be charged by it's max power
                      P_b=[P_b;P_dem(i)-P_ren(i)];
                      P_g=[P_g;0];
                      P_s=[P_s;P_dem(i)];
                      E=E_b(end)-dt*P_b(i);
                      E_b=[E_b;E];
                  else                                  % battery is limited to be charged by it's max power
                       P_b=[P_b;-1*P_b_max_ch];
                       P_g=[P_g;P_dem(i)-P_ren(i)-P_b(i)];
                       P_s=[P_s;P_dem(i)];
                       E=E_b(end)-dt*P_b(i);
                       E_b=[E_b;E];
                  end
          else                                              % battery reached to max SOC or No battery
              P_b=[P_b;0];
              P_g=[P_g;P_dem(i)-P_ren(i)];
              P_s=[P_s;P_dem(i)];
              E=E_b(end);
              E_b=[E_b;E];
          end
      else                                                        % Supply less than demand
          if E_b(end)<E_max*n_b*s_b                         % Not reached to max SOC
                  if P_ren(i)<=P_b_max_ch*n_b  % battery NOT limited to be charged by it's max power
                      P_b=[P_b;-P_ren(i)];
                      P_g=[P_g;0];
                      P_s=[P_s;0];
                      E=E_b(end)-dt*P_b(i);
                      E_b=[E_b;E];
                  else                                  % battery is limited to be charged by it's max power
                       P_b=[P_b;-1*P_b_max_ch];
                       P_g=[P_g;P_b(i)-P_ren(i)];
                       P_s=[P_s;0];
                       E=E_b(end)-dt*P_b(i);
                       E_b=[E_b;E];
                  end
          else                                              % battery reached to max SOC or No battery
              P_b=[P_b;0];
              P_g=[P_g;-P_ren(i)];
              P_s=[P_s;0];
              E=E_b(end);
              E_b=[E_b;E];
          end
      end
    end
end
P_g_dt=P_g*dt;
%    grid_with=sum(P_g_dt(P_g_dt > 0)); %sum of all positive grid power(Energy withdrawn from grid over a year [kWh])
%    gridwithdrawal=[gridwithdrawal,grid_with];

for m = 1:1:12
  grid_month = P_g_dt(months == m);
  NoSupply_month = P_s(months == m);
  NoSupply_hour(m) = nnz(NoSupply_month == 0);
  grid_with_hour(m) = nnz(grid_month > 0);
  grid_with_E(m) = sum(grid_month(grid_month > 0))*100;
  grid_inj_E(m) = sum(grid_month(grid_month < 0))*100;
end
PR  =  [PR;[alpha, beta,gamma,(months_hours - NoSupply_hour)./sum(months_hours - NoSupply_hour)]];
MHE =  [MHE;[alpha, beta,gamma,(months_hours - NoSupply_hour)]];
GwE = [GwE;[alpha, beta,gamma,grid_with_E]];
GiE = [GiE;[alpha, beta,gamma,grid_inj_E]];
NSH = [NSH;[alpha, beta,gamma,NoSupply_hour]];
